// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]

  collections Collection[]
  bookmarks Bookmark[]
  tags Tag[]
  sessions Session[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Collection {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name String @unique

  bookmarks Bookmark[]

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  page_url String
  note String?
  excerpt String?
  createdAt DateTime @default(now())

  collectionId String? @db.ObjectId
  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  tags  TagToBookmark[]

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([page_url, userId])
}

model Tag {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  bookmarks TagToBookmark[]

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TagToBookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  tag Tag @relation(fields: [tagId], references: [id])
  tagId String  @db.ObjectId
  bookmark Bookmark @relation(fields: [bookmarkId], references: [id])
  bookmarkId String @db.ObjectId

  @@unique([tagId, bookmarkId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId @unique
  expires      DateTime
  sessionToken String    @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
}